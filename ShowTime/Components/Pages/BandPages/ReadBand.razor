@page "/bands"
@rendermode InteractiveServer

<PageTitle>Bands</PageTitle>

<h1>Bands</h1>

<CreateBandModal @ref="_createModal" OnCreated="ReloadBands" />
<DeleteBandModal @ref="_deleteModal" OnDeleted="ReloadBands" />
<UpdateBandModal @ref="_updateModal" OnUpdated="ReloadBands" />

<DataGrid TItem="Band"
          Data="@_bands">
    <DataGridColumn TItem="Band" Field="@nameof(Band.Name)" Caption="Name" />
    <DataGridColumn TItem="Band" Field="@nameof(Band.Genre)" Caption="Genre" />

    <DataGridColumn TItem="Band" Caption="Actions">
        <DisplayTemplate>
            <Button Color="Color.Primary" Size="Size.Small" Clicked="e => ShowUpdateModal(context)">
                <Blazorise.Icon Name="IconName.Edit" />
            </Button>
            <Button Color="Color.Danger" Size="Size.Small" Clicked="e => ShowDeleteModal(context)">
                <Blazorise.Icon Name="IconName.Delete" />
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

<Button Color="Color.Primary" Clicked="ShowCreateModal">Create</Button>

@code {
    [Inject]
    public required IBandRepository BandRepository { get; set; }

    private List<Band> _bands = new();
    private CreateBandModal? _createModal;
    private DeleteBandModal? _deleteModal;
    private UpdateBandModal? _updateModal;

    protected override async Task OnInitializedAsync()
    {
        _bands = (await BandRepository.GetAllAsync()).ToList();
    }

    private async Task ShowCreateModal()
    {
        // this needs to be async bcs a band object isnt passed
        if (_createModal != null)
        {
            await _createModal.ShowModal();
        }
    }

    private void ShowDeleteModal(Band band)
    {
        _deleteModal?.ShowModal(band);
    }

    private void ShowUpdateModal(Band band)
    {
        _updateModal?.ShowModal(band);
    }

    private void HandleOnCreated(Band createdBand)
    {
        // creating a new _bands reference to force DataGrid to update
        // StateHasChanged() doesn't achieve this effect..
        _bands = _bands.Append(createdBand).ToList();
    }

    private void HandleOnDeleted(Band deletedBand)
    {
        _bands = _bands.Where(b => b.Id != deletedBand.Id).ToList();
    }

    private void HandleOnUpdated(Band updatedBand)
    {
        _bands = _bands.Select(b => b.Id == updatedBand.Id ? updatedBand : b).ToList();
    }

    private async Task ReloadBands()
    {
        _bands = (await BandRepository.GetAllAsync()).ToList();
    }
}
