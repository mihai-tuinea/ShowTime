<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Update Band</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <EditForm Model="_updatedBand" OnValidSubmit="HandleUpdate">
                <DataAnnotationsValidator />
                <Field>
                    <Label>
                        <Strong>Band Name</Strong>
                    </Label>
                    <br />
                    <InputText @bind-value=_updatedBand.Name Placeholder="Type band name" />
                    <ValidationMessage For="@(() => _updatedBand.Name)" />
                </Field>
                <Field>
                    <Label>
                        <Strong>Genre</Strong>
                    </Label>
                    <br />
                    <Select TValue="Genre" @bind-SelectedValue="_updatedBand.Genre">
                        @foreach (Genre genre in Enum.GetValues<Genre>())
                        {
                            <SelectItem Value="@genre">@genre.ToString()</SelectItem>
                        }
                    </Select>
                </Field>

                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
                    <Button Color="Color.Primary" Type="ButtonType.Submit">Save Changes</Button>
                </ModalFooter>
            </EditForm>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnUpdated { get; set; }

    [Inject]
    public required IBandRepository BandRepository { get; set; }

    private bool modalVisible;
    private Band _originalBand = new Band();
    private Band _updatedBand = new Band();

    public async Task ShowModal(Band band)
    {
        _originalBand = await BandRepository.GetByIdAsync(band.Id);

        _updatedBand = new Band
        {
            Name = _originalBand.Name,
            Genre = _originalBand.Genre
        };

        modalVisible = true;
        StateHasChanged();
    }

    private void HideModal()
    {
        modalVisible = false;
    }

    private async Task HandleUpdate()
    {
        if (_updatedBand != null)
        {
            _originalBand.Name = _updatedBand.Name;
            _originalBand.Genre = _updatedBand.Genre;

            BandRepository.Update(_originalBand);
            await BandRepository.SaveChangesAsync();
            await OnUpdated.InvokeAsync();
        }
        HideModal();
    }
}
