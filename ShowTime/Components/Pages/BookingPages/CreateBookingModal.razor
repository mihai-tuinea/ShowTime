<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create Booking</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <EditForm Model="_bookingToCreate" OnValidSubmit="HandleCreate">
                <DataAnnotationsValidator />

                <Field>
                    <Label>
                        <Strong>Festival</Strong>
                    </Label>
                    <Select TValue="Guid"
                            @bind-SelectedValue="_bookingToCreate.FestivalId"
                            @onchange="OnFestivalSelected">
                        <SelectItem Value="@Guid.Empty" disabled selected>
                            -- Select a festival --
                        </SelectItem>
                        @if (_festivals != null)
                        {
                            @foreach (Festival f in _festivals)
                            {
                                <SelectItem Value="@f.Id">@f.Name</SelectItem>
                            }
                        }
                    </Select>
                </Field>

                <Field>
                    <Label>
                        <Strong>Booking Options</Strong>
                    </Label>
                    <RadioGroup TValue="int"
                                @bind-Value="_bookingOption"
                                Disabled="@(_selectedFestival == null)"
                                @onchange="OnBookingOptionChanged">
                        <Radio Value="1">Full Access</Radio>
                        <Radio Value="2">Individual Day</Radio>
                    </RadioGroup>
                </Field>

                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
                    <Button Color="Color.Primary" Type="ButtonType.Submit">Create</Button>
                </ModalFooter>
            </EditForm>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnCreated { get; set; }
    [Parameter]
    public Guid UserId { get; set; }

    [Inject]
    public required IBookingRepository BookingRepository { get; set; }
    [Inject]
    public required IFestivalRepository FestivalRepository { get; set; }

    private bool modalVisible;
    private Booking _bookingToCreate = new Booking();
    private List<Festival>? _festivals;

    private Festival? _selectedFestival = null;
    private int _bookingOption = 0; // 0 default 1 Full Access 2 Individual Day

    private void OnBookingOptionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var value))
        {
            _bookingOption = value;
            SetBookingDatesForOption();
        }
    }

    private void OnFestivalSelected(ChangeEventArgs e)
    {
        _bookingOption = 0; // Reset booking option when festival is selected
        if (Guid.TryParse(e.Value?.ToString(), out var selectedFestivalId))
        {
            _bookingToCreate.FestivalId = selectedFestivalId;
            _selectedFestival = _festivals?.FirstOrDefault(f => f.Id == selectedFestivalId);
            Console.WriteLine($"Selected Festival: {_selectedFestival?.Name}");
        }
        else
        {
            _bookingToCreate.FestivalId = default(Guid);
            _selectedFestival = null;
            Console.WriteLine("No valid festival selected.");
        }
    }

    private void SetBookingDatesForOption()
    {
        if (_bookingOption == 1 && _selectedFestival != null)
        {
            _bookingToCreate.StartDate = _selectedFestival.StartDate;
            _bookingToCreate.EndDate = _selectedFestival.EndDate;
        }
    }

    public async Task ShowModal(Guid userId)
    {
        modalVisible = true;
        _bookingOption = 0;
        _selectedFestival = null;
        UserId = userId;
        _bookingToCreate = new Booking
        {
            ApplicationUserId = UserId
        };
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();

        Console.WriteLine("Festivals loaded:");
        foreach (var festival in _festivals)
        {
            Console.WriteLine($"Id: {festival.Id}, Name: {festival.Name}");
        }
    }

    private void HideModal()
    {
        modalVisible = false;
    }

    private async Task HandleCreate()
    {
        if (_bookingToCreate != null && _festivals != null)
        {
            Console.WriteLine($"Selected FestivalId before validation: {_bookingToCreate.FestivalId}");

            // Validate the selected FestivalId
            if (_bookingToCreate.FestivalId == default(Guid))
            {
                Console.WriteLine("No festival selected.");
                return; // Prevent saving if no festival is selected
            }

            var selectedFestival = _festivals.FirstOrDefault(f => f.Id == _bookingToCreate.FestivalId);
            if (selectedFestival == null)
            {
                Console.WriteLine("Invalid FestivalId selected.");
                return; // Prevent saving if the FestivalId is invalid
            }

            // Save the booking
            _bookingToCreate.Festival = selectedFestival; // Optional: Set the navigation property
            await BookingRepository.AddAsync(_bookingToCreate);
            await BookingRepository.SaveChangesAsync();
            await OnCreated.InvokeAsync();
        }
        HideModal();
    }
}