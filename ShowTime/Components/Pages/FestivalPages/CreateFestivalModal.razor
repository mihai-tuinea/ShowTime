<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create Festival</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <EditForm Model="_festivalToCreate" OnValidSubmit="HandleCreate">
                <DataAnnotationsValidator />

                <!-- Name -->
                <Field>
                    <Label>
                        <Strong>Festival Name</Strong>
                    </Label>
                    <br />
                    <InputText @bind-value=_festivalToCreate.Name Placeholder="Type festival name" />
                    <ValidationMessage For="@(() => _festivalToCreate.Name)" />
                </Field>

                <!-- Location -->
                <Label>
                    <Strong>Festival Location</Strong>
                </Label>
                <br />
                <InputText @bind-value=_festivalToCreate.Location Placeholder="Type festival location" />
                <ValidationMessage For="@(() => _festivalToCreate.Location)" />

                <!-- Duration -->
                <Field>
                    <Label>
                        <Strong>Start Date</Strong>
                    </Label>
                    <br />
                    <DateEdit @bind-Date="@StartDate"
                              Max="@EndDate"
                              TValue="DateTime?"
                              Placeholder="Start Date" />
                </Field>

                <Field>
                    <Label>
                        <Strong>End Date</Strong>
                    </Label>
                    <br />
                    <DateEdit @bind-Date="@EndDate"
                              Min="@StartDate"
                              TValue="DateTime?"
                              Placeholder="End Date" />
                </Field>

                <!-- Image -->
                <Field>
                    <Label>
                        <Strong>Image (optional)</Strong>
                    </Label>
                    <FilePicker Upload="OnFileUpload" />
                </Field>

                <!-- Bands -->
                <Field>
                    <Label>
                        <Strong>Bands</Strong>
                    </Label>
                    <br />
                    @if (_bands != null)
                    {
                        @foreach (var band in _bands)
                        {
                            <Check TValue="bool"
                                   Checked="@(_selectedFestivalBands.Any(fb => fb.BandId == band.Id))"
                                   CheckedChanged="checkedValue => OnBandCheckedChanged(checkedValue, band)">
                                @band.Name
                            </Check>
                        }
                    }
                </Field>

                <!-- Lineup -->
                <Field>
                    <Label>
                        <Strong>Lineup</Strong>
                    </Label>
                    @if (_selectedFestivalBands != null)
                    {
                        @foreach (FestivalBand fb in _selectedFestivalBands)
                        {
                            <Card>
                                <CardBody>
                                    <Strong>@(fb.Order + 1).</Strong> @fb.Band?.Name
                                </CardBody>
                            </Card>
                        }
                    }
                </Field>

                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
                    <Button Color="Color.Primary" Type="ButtonType.Submit">Create</Button>
                </ModalFooter>
            </EditForm>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnCreated { get; set; }

    [Inject]
    public required IBandRepository BandRepository { get; set; }
    [Inject]
    public required IFestivalRepository FestivalRepository { get; set; }

    private bool modalVisible;
    private Festival _festivalToCreate = new Festival();
    private List<Band>? _bands;
    private List<FestivalBand> _selectedFestivalBands = new();

    private DateTime? StartDate { get; set; } = DateTime.Today;
    private DateTime? EndDate { get; set; } = DateTime.Today.AddDays(1);

    public async Task ShowModal()
    {
        _festivalToCreate = new Festival();
        _bands = (await BandRepository.GetAllAsync()).ToList();
        _selectedFestivalBands.Clear();

        modalVisible = true;
    }

    private void HideModal()
    {
        modalVisible = false;
    }

    private void OnBandCheckedChanged(bool checkedValue, Band band)
    {
        if (checkedValue)
        {
            var newFestivalBand = new FestivalBand()
            {
                FestivalId = _festivalToCreate.Id,
                BandId = band.Id,
                Band = band,
                Order = _selectedFestivalBands.Count()
            };
            _selectedFestivalBands.Add(newFestivalBand);
        }
        else
        {
            _selectedFestivalBands.RemoveAll(fb => fb.BandId == band.Id);
            int index = 0;
            foreach (FestivalBand fb in _selectedFestivalBands)
            {
                fb.Order = index++;
            }
        }
    }

    private async Task OnFileUpload(FileUploadEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            _festivalToCreate.Image = memoryStream.ToArray();
        }
    }

    private async Task HandleCreate()
    {
        if (_festivalToCreate != null)
        {
            _festivalToCreate.StartDate = StartDate ?? DateTime.MinValue;
            _festivalToCreate.EndDate = EndDate ?? DateTime.MinValue;
            _festivalToCreate.FestivalBands = _selectedFestivalBands;

            await FestivalRepository.AddAsync(_festivalToCreate);
            await FestivalRepository.SaveChangesAsync();
            await OnCreated.InvokeAsync();
        }
        HideModal();
    }
}