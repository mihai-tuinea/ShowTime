@page "/festivals"
@rendermode InteractiveServer

<PageTitle>Festivals</PageTitle>

<h1>Festivals</h1>

<CreateFestivalModal @ref="_createModal" OnCreated="ReloadFestivals" />
<DeleteFestivalModal @ref="_deleteModal" OnDeleted="ReloadFestivals" />
<UpdateFestivalModal @ref="_updateModal" OnUpdated="ReloadFestivals" />

<DataGrid TItem="Festival"
          Data="@_festivals">
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.Name)" Caption="Name" />
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.Location)" Caption="Location" />
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.StartDate)" Caption="Start Date">
        <DisplayTemplate>
            @context.StartDate.ToString("dd-MM-yyyy")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Festival" Field="@nameof(Festival.EndDate)" Caption="End Date">
        <DisplayTemplate>
            @context.EndDate.ToString("dd-MM-yyyy")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Festival" Caption="Actions">
        <DisplayTemplate>
            <Button Color="Color.Primary" Size="Size.Small" Clicked="e => ShowUpdateModal(context)">
                <Blazorise.Icon Name="IconName.Edit" />
            </Button>
            <Button Color="Color.Danger" Size="Size.Small" Clicked="e => ShowDeleteModal(context)">
                <Blazorise.Icon Name="IconName.Delete" />
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

<Button Color="Color.Primary" Clicked="ShowCreateModal">Create</Button>

@code {
    [Inject]
    public required IFestivalRepository FestivalRepository { get; set; }

    private List<Festival> _festivals = new();
    private CreateFestivalModal? _createModal;
    private DeleteFestivalModal? _deleteModal;
    private UpdateFestivalModal? _updateModal;

    protected override async Task OnInitializedAsync()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
    }

    private async Task ShowCreateModal()
    {
        if (_createModal != null)
        {
            await _createModal.ShowModal();
        }
    }

    private void ShowDeleteModal(Festival festival)
    {
        _deleteModal?.ShowModal(festival);
    }

    private void ShowUpdateModal(Festival festival)
    {
        _updateModal?.ShowModal(festival);
    }

    private async Task ReloadFestivals()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
    }
}
