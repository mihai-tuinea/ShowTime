@page "/festivals"
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Festivals</PageTitle>

<h1>Festivals</h1>

@if (_festivals == null)
{
}
else
{


    <AuthorizeView Roles="admin">
        <Authorized>
            <Button Color="Color.Primary" Clicked="ShowCreateModal">Create</Button>
            <br />
        </Authorized>
    </AuthorizeView>


    <CreateFestivalModal @ref="_createModal" OnCreated="ReloadFestivals" />
    <DeleteFestivalModal @ref="_deleteModal" OnDeleted="ReloadFestivals" />
    <UpdateFestivalModal @ref="_updateModal" OnUpdated="ReloadFestivals" />

    <TextEdit Placeholder="Search by festival name.."
              Text="@_searchTerm"
              TextChanged="FilterFestivals"></TextEdit>
    <br />

    <div class="card-container">
        @if (_filteredFestivals != null)
        {
            @foreach (Festival festival in _filteredFestivals)
            {
                <Card Class="festival-card">
                    <CardImage Source="@(
                               festival.Image != null
                               ? $"data:image/jpeg;base64,{Convert.ToBase64String(festival.Image)}"
                               : "/images/festivalPlaceholder.png")"
                   Class="festival-card-image" />
        <CardBody>
            <CardTitle Size="5" Class="festival-card-title">
                <Strong>@festival.Name</Strong>
            </CardTitle>
            <CardSubtitle Class="festival-card-subtitle">
                Location: @festival.Location
            </CardSubtitle>
            <CardSubtitle Class="festival-card-subtitle">
                @festival.StartDate.ToString("dd-MM-yyyy") to @festival.EndDate.ToString("dd-MM-yyyy")
            </CardSubtitle>
            <AuthorizeView Roles="admin">
                <Authorized>
                    <div class="festival-card-actions">
                        <Button Color="Color.Primary" Size="Size.Small" Clicked="e => ShowUpdateModal(festival)">
                            <Blazorise.Icon Name="IconName.Edit" />
                        </Button>
                        <Button Color="Color.Danger" Size="Size.Small" Clicked="e => ShowDeleteModal(festival)">
                            <Blazorise.Icon Name="IconName.Delete" />
                        </Button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </CardBody>
    </Card>
        }
        }
    </div>

}

@code {
    [Inject]
    public required IFestivalRepository FestivalRepository { get; set; }

    private List<Festival>? _festivals;
    private List<Festival>? _filteredFestivals;
    private string _searchTerm = string.Empty;
    private CreateFestivalModal? _createModal;
    private DeleteFestivalModal? _deleteModal;
    private UpdateFestivalModal? _updateModal;

    protected override async Task OnInitializedAsync()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
        _filteredFestivals = _festivals;
    }

    private async Task ShowCreateModal()
    {
        if (_createModal != null)
        {
            await _createModal.ShowModal();
        }
    }

    private void ShowDeleteModal(Festival festival)
    {
        _deleteModal?.ShowModal(festival);
    }

    private void ShowUpdateModal(Festival festival)
    {
        _updateModal?.ShowModal(festival);
    }

    private async Task ReloadFestivals()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
        _filteredFestivals = _festivals;
        _searchTerm = string.Empty;
    }

    private void FilterFestivals(string value)
    {
        if (_festivals != null)
        {
            _searchTerm = value;
            if (string.IsNullOrEmpty(_searchTerm))
            {
                _filteredFestivals = _festivals;
            }
            else
            {
                _filteredFestivals = _festivals
                .Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
            }
        }
    }
}

<style>
    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
        justify-content: center;
    }

    .festival-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .festival-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
        }

    .festival-card-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .festival-card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .festival-card-subtitle {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 0.5rem;
    }

    .festival-card-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
    }
</style>
