@page "/festivals"
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Festivals</PageTitle>

@if (_festivals == null)
{
}
else
{
    <div>
        <h1>Festivals</h1>
        <AuthorizeView Roles="admin">
            <Authorized>
                <Button Color="Color.Primary" Clicked="ShowCreateModal">Create</Button>
                <br />
            </Authorized>
        </AuthorizeView>
    </div>

    <CreateFestivalModal @ref="_createModal" OnCreated="ReloadFestivals" />
    <DeleteFestivalModal @ref="_deleteModal" OnDeleted="ReloadFestivals" />
    <UpdateFestivalModal @ref="_updateModal" OnUpdated="ReloadFestivals" />

    @*
<DataGrid TItem="Festival"
          Data="@_festivals">
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.Name)" Caption="Name" />
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.Location)" Caption="Location" />
    <DataGridColumn TItem="Festival" Field="@nameof(Festival.StartDate)" Caption="Start Date">
        <DisplayTemplate>
            @context.StartDate.ToString("dd-MM-yyyy")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Festival" Field="@nameof(Festival.EndDate)" Caption="End Date">
        <DisplayTemplate>
            @context.EndDate.ToString("dd-MM-yyyy")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="Festival" Caption="Actions">
        <DisplayTemplate>
            <Button Color="Color.Primary" Size="Size.Small" Clicked="e => ShowUpdateModal(context)">
                <Blazorise.Icon Name="IconName.Edit" />
            </Button>
            <Button Color="Color.Danger" Size="Size.Small" Clicked="e => ShowDeleteModal(context)">
                <Blazorise.Icon Name="IconName.Delete" />
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>
*@

    <TextEdit Placeholder="Search by festival name.."
              Text="@_searchTerm"
              TextChanged="FilterFestivals"></TextEdit>
    <br />

    <CardDeck>
        @if (_festivals != null)
        {
            @foreach (Festival festival in _filteredFestivals)
            {
                <Card>
                    <CardBody>
                        <CardTitle Size="5"><Strong>@festival.Name</Strong></CardTitle>
                        <br />
                        <CardSubtitle>Location: @festival.Location</CardSubtitle>
                        <br />
                        <CardSubtitle>@festival.StartDate.ToString("dd-MM-yyyy") to @festival.EndDate.ToString("dd-MM-yyyy")</CardSubtitle>
                        <br />
                        <Button Color="Color.Primary" Size="Size.Small" Clicked="e => ShowUpdateModal(festival)">
                            <Blazorise.Icon Name="IconName.Edit" />
                        </Button>
                        <Button Color="Color.Danger" Size="Size.Small" Clicked="e => ShowDeleteModal(festival)">
                            <Blazorise.Icon Name="IconName.Delete" />
                        </Button>
                    </CardBody>
                </Card>
            }
        }
    </CardDeck>

}

@code {
    [Inject]
    public required IFestivalRepository FestivalRepository { get; set; }

    private List<Festival>? _festivals;
    private List<Festival>? _filteredFestivals;
    private string _searchTerm = string.Empty;
    private CreateFestivalModal? _createModal;
    private DeleteFestivalModal? _deleteModal;
    private UpdateFestivalModal? _updateModal;

    protected override async Task OnInitializedAsync()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
        _filteredFestivals = _festivals;
    }

    private async Task ShowCreateModal()
    {
        if (_createModal != null)
        {
            await _createModal.ShowModal();
        }
    }

    private void ShowDeleteModal(Festival festival)
    {
        _deleteModal?.ShowModal(festival);
    }

    private void ShowUpdateModal(Festival festival)
    {
        _updateModal?.ShowModal(festival);
    }

    private async Task ReloadFestivals()
    {
        _festivals = (await FestivalRepository.GetAllAsync()).ToList();
        _filteredFestivals = _festivals;
        _searchTerm = string.Empty;
    }

    private void FilterFestivals(string value)
    {
        if (_festivals != null)
        {
            _searchTerm = value;
            if (string.IsNullOrEmpty(_searchTerm))
            {
                _filteredFestivals = _festivals;
            }
            else
            {
                _filteredFestivals = _festivals
                .Where(f => f.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
            }
        }
    }
}
